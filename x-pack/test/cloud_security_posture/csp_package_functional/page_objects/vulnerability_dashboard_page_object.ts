/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import { ELASTIC_HTTP_VERSION_HEADER } from '@kbn/core-http-common';
import type { FunctionalFtrProviderContext } from '../../common/ftr_provider_context';

export function VulnerabilityDashboardPageProvider({
  getService,
  getPageObjects,
}: FunctionalFtrProviderContext) {
  const PageObjects = getPageObjects(['common', 'header']);
  const retry = getService('retry');
  const supertest = getService('supertest');
  const log = getService('log');
  const testSubjects = getService('testSubjects');

  /**
   * required before indexing findings
   */
  const waitForPluginInitialized = (): Promise<void> =>
    retry.try(async () => {
      log.debug('Check CSP plugin is initialized');
      const response = await supertest
        .get('/internal/cloud_security_posture/status?check=init')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .expect(200);
      expect(response.body).to.eql({ isPluginInitialized: true });
      log.debug('CSP plugin is initialized');
    });

  const navigateToVulnerabilityDashboardPage = async () => {
    await PageObjects.common.navigateToUrl(
      'securitySolution', // Defined in Security Solution plugin
      'cloud_security_posture/vulnerability_dashboard',
      { shouldUseHashForSubUrl: false }
    );
  };

  const dashboard = {
    getDashboardPageHeader: () => testSubjects.find('vulnerability-dashboard-page-header'),
    getCriticalStat: () => testSubjects.find('critical-count-stat'),
    getHighStat: () => testSubjects.find('high-count-stat'),
    getMediumStat: () => testSubjects.find('medium-count-stat'),
  };

  return {
    navigateToVulnerabilityDashboardPage,
    waitForPluginInitialized,
    dashboard,
  };
}
