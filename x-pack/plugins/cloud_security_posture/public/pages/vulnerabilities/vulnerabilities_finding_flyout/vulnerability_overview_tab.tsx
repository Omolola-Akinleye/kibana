/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { EuiFlexGroup, EuiFlexItem, EuiHorizontalRule, EuiLink, EuiText } from '@elastic/eui';
import { css } from '@emotion/react';
import { FormattedMessage } from '@kbn/i18n-react';
import moment from 'moment';
import React from 'react';
import { euiThemeVars } from '@kbn/ui-theme';
import { i18n } from '@kbn/i18n';
import { float } from '@elastic/elasticsearch/lib/api/typesWithBodyKey';
import { getCvsScoreColor } from '../../../common/utils/get_cvsscore_color';
import { CVSScoreBadge } from '../../../components/vulnerability_badges';
import { CVSSVersion } from '../../../../common/types';

interface VectorScoreBase {
  V3Score?: float;
  V3Vector?: string;
  V2Score?: float;
  V2Vector?: string;
}
interface CVSScoreProps {
  vectorBaseScore: VectorScoreBase;
  vendor: string;
}

type Vendor = 'NVD' | 'Red Hat' | 'GHSA';

const cvssVendors: Record<string, Vendor> = {
  nvd: 'NVD',
  redhat: 'Red Hat',
  ghsa: 'GHSA',
};

interface VulnerabilityDetailProps {
  vulnerability: any;
}

const getVectorScoreList = (vectorBaseScore: VectorScoreBase) => {
  const result = [];
  const v2Vector = vectorBaseScore?.V2Vector;
  const v2Score = vectorBaseScore?.V2Score;
  const v3Vector = vectorBaseScore?.V3Vector;
  const v3Score = vectorBaseScore?.V3Score;

  if (v2Vector) {
    result.push({
      version: '2.0',
      vector: v2Vector,
      score: v2Score,
    });
  }

  if (v3Vector) {
    result.push({
      version: '2.0',
      vector: v3Vector,
      score: v3Score,
    });
  }

  return result;
};

const CVSScore = ({ vectorBaseScore, vendor }: CVSScoreProps) => {
  const vendorName =
    cvssVendors[vendor] ??
    i18n.translate('xpack.csp.findings.vulnerabilityOverviewDetail.cvsScore.unknownvendorName', {
      defaultMessage: 'Unknown vendor',
    });

  const vectorScores = getVectorScoreList(vectorBaseScore);

  return (
    <EuiFlexGroup
      alignItems="center"
      css={css`
        border: 1px solid #d3dae6;
        border-radius: 6px;
        padding: ${euiThemeVars.euiSizeM};
      `}
    >
      <EuiFlexItem
        grow={false}
        css={css`
          width: 94px;
          font-weight: 600;
        `}
      >
        {vendorName}
      </EuiFlexItem>
      <EuiFlexGroup direction="column" gutterSize="s">
        {vectorScores.length > 0 &&
          vectorScores.map((vectorScore) => <VectorScore vectorScore={vectorScore} />)}
      </EuiFlexGroup>
    </EuiFlexGroup>
  );
};

const VectorScore = ({
  vectorScore,
}: {
  vectorScore: {
    vector: string;
    score: number | undefined;
    version: string;
  };
}) => {
  const { score, vector, version } = vectorScore;
  return (
    <>
      <EuiFlexGroup
        alignItems="center"
        css={css`
          background: #f1f4fa;
          padding: ${euiThemeVars.euiSizeXS} ${euiThemeVars.euiSizeS};
          border-radius: 6px;
        `}
      >
        <EuiFlexItem>
          <EuiText
            css={css`
              font-size: ${euiThemeVars.euiFontSizeM};
            `}
          >
            {vector}{' '}
          </EuiText>
        </EuiFlexItem>

        <EuiFlexItem grow={false}>
          {score && (
            <CVSScoreBadge
              color={getCvsScoreColor(score)}
              score={score}
              version={version as CVSSVersion}
            />
          )}
        </EuiFlexItem>
      </EuiFlexGroup>
    </>
  );
};

const VulnerabilityOverviewTiles = ({ vulnerability }: VulnerabilityDetailProps) => {
  const tileStyle = css`
    padding: ${euiThemeVars.euiFontSizeM};
    background: ${euiThemeVars.euiColorLightestShade};
    border-radius: 6px;
    height: 74px;
  `;
  const tileTitleTextStyle = css`
    line-height: 20px;
    margin-bottom: 6px;
  `;

  const date = moment(vulnerability?.published_date).format('LL').toString();

  return (
    <EuiFlexGroup>
      <EuiFlexItem css={tileStyle}>
        <EuiText css={tileTitleTextStyle}>
          <FormattedMessage
            id="xpack.csp.findings.vulnerabilityDetailTile.cvsScore"
            defaultMessage="CVSS"
          />
        </EuiText>
        <div>
          <CVSScoreBadge
            color={getCvsScoreColor(vulnerability?.score?.impact) ?? ''}
            version={vulnerability?.score?.version}
            score={vulnerability?.score?.impact}
          />
        </div>
      </EuiFlexItem>
      <EuiFlexItem css={tileStyle}>
        <EuiText css={tileTitleTextStyle}>
          <FormattedMessage
            id="xpack.vulnerabilityDetailTile.dataSource"
            defaultMessage="Data Source"
          />
        </EuiText>
        <EuiLink href={vulnerability?.data_source?.URL} target="_blank">
          {vulnerability?.data_source?.ID}
        </EuiLink>
      </EuiFlexItem>
      <EuiFlexItem css={tileStyle}>
        <EuiText css={tileTitleTextStyle}>
          <FormattedMessage
            id="xpack.vulnerabilityDetailTile.publishedDate"
            defaultMessage="Published Date"
          />
        </EuiText>

        <strong>
          <FormattedMessage
            id="xpack.vulnerabilityDetailTile.publishedDateText"
            defaultMessage="{date}"
            values={{
              date,
            }}
          />
        </strong>
      </EuiFlexItem>
    </EuiFlexGroup>
  );
};

export const VulnerabilityOverviewTab = ({ vulnerability }: VulnerabilityDetailProps) => {
  const emptyFixesMessageState = i18n.translate(
    'xpack.csp.findings.vulnerabilityOverviewDetail.emptyFixesMessage',
    {
      defaultMessage: 'No available fixes yet.',
    }
  );

  const fixesDisplayText = vulnerability?.package?.fixed_version
    ? `${vulnerability?.package?.name} ${vulnerability?.package?.fixed_version}`
    : emptyFixesMessageState;

  const cvssScores: JSX.Element[] = Object.entries<VectorScoreBase>(vulnerability?.cvss).map(
    ([vendor, vectorScoreBase]: [string, VectorScoreBase]) => {
      return (
        <EuiFlexItem>
          <CVSScore vectorBaseScore={vectorScoreBase} vendor={vendor} />
        </EuiFlexItem>
      );
    }
  );

  const horizontalStyle = css`
    margin-block: 12px;
  `;

  const flyoutSubheadingStyle = css`
    font-size: 16px;
    line-height: 24px;
    margin-bottom: 8px;
    font-weight: 600;
  `;

  return (
    <EuiFlexGroup direction="column">
      <EuiFlexItem>
        <VulnerabilityOverviewTiles vulnerability={vulnerability} />
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.findings.vulnerabilityDetailOverview.description"
            defaultMessage="Description"
          />
        </h4>
        <EuiText>{vulnerability?.description}</EuiText>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.findings.vulnerabilityDetailOverview.fixes"
            defaultMessage="Fixes"
          />
        </h4>
        <EuiText>{fixesDisplayText}</EuiText>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      {cvssScores?.length > 0 && (
        <EuiFlexItem>
          <h4 css={flyoutSubheadingStyle}>
            <FormattedMessage
              id="xpack.csp.findings.vulnerabilityDetailOverview.vulnerabilityScores"
              defaultMessage="Vulnerability Scores"
            />
          </h4>
          <EuiFlexGroup direction="column" gutterSize="l">
            {cvssScores}
          </EuiFlexGroup>
        </EuiFlexItem>
      )}
    </EuiFlexGroup>
  );
};
