/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo, useState } from 'react';
import {
  EuiFlexGroup,
  EuiFlexItem,
  EuiFlyout,
  EuiFlyoutBody,
  EuiFlyoutFooter,
  EuiFlyoutHeader,
  EuiLink,
  EuiTab,
  EuiTabs,
  EuiTitle,
} from '@elastic/eui';

import { FormattedMessage } from '@kbn/i18n-react';
import { capitalize } from 'lodash';
import { euiThemeVars } from '@kbn/ui-theme';
import { css } from '@emotion/react';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import { VulnerabilityJsonTab } from './vulnerability_json_tab';
import { SeverityStatusBadge } from '../../../components/vulnerability_badges';
import { getCvsScoreColor } from '../../../common/utils/get_cvsscore_color';
import { SeverityStatus } from '../../../../common/types';

const overviewTabId = 'overview';
const jsonTabId = 'json';

export const VulnerabilityFindingFlyout = ({
  closeFlyout,
  vulnerabilityEvent,
}: {
  closeFlyout: () => void;
  vulnerabilityEvent: any;
}) => {
  const [selectedTabId, setSelectedTabId] = useState(overviewTabId);
  const vulnerability = vulnerabilityEvent?.finding?.vulnerability;
  const resourceName = vulnerabilityEvent?.resource?.name;

  const tabs = useMemo(
    () => [
      {
        id: overviewTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.findings.vulnerabilityFindingFlyout.overviewTabLabel"
            defaultMessage="Overview"
          />
        ),
        content: <VulnerabilityOverviewTab vulnerability={vulnerability} />,
      },
      {
        id: jsonTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.findings.vulnerabilityFindingFlyout.jsonTabLabel"
            defaultMessage="JSON"
          />
        ),
        content: <VulnerabilityJsonTab vulnerabilityEvent={vulnerabilityEvent} />,
      },
    ],
    [vulnerability, vulnerabilityEvent]
  );
  const onSelectedTabChanged = (id: string) => setSelectedTabId(id);

  const renderTabs = () =>
    tabs.map((tab, index) => (
      <EuiTab
        onClick={() => onSelectedTabChanged(tab.id)}
        isSelected={tab.id === selectedTabId}
        key={index}
      >
        {tab.name}
      </EuiTab>
    ));

  const selectedTabContent = useMemo(
    () => tabs.find((obj) => obj.id === selectedTabId)?.content,
    [selectedTabId, tabs]
  );

  return (
    <EuiFlyout onClose={closeFlyout}>
      <EuiFlyoutHeader>
        <EuiFlexGroup
          direction="column"
          css={css`
            gap: 8px;
          `}
        >
          <EuiFlexItem>
            <SeverityStatusBadge
              color={getCvsScoreColor(vulnerability?.score?.impact)}
              status={capitalize(vulnerability?.severity) as SeverityStatus}
            />
          </EuiFlexItem>
          <EuiFlexItem>
            <EuiFlexGroup
              direction="column"
              css={css`
                gap: 8px;
              `}
            >
              <EuiFlexItem>
                <EuiTitle
                  size="m"
                  css={css`
                    color: ${euiThemeVars.euiColorPrimaryText};
                    line-height: 32px;
                  `}
                >
                  <EuiLink target={'_blank'} href={vulnerability?.reference}>
                    {vulnerability?.id}
                  </EuiLink>
                </EuiTitle>
              </EuiFlexItem>
              <EuiFlexItem>
                <p
                  css={css`
                    line-height: 20px;
                    margin-bottom: 16px;
                  `}
                >
                  {`${resourceName} | ${vulnerability?.package?.name}  ${vulnerability?.package?.version}`}
                </p>
              </EuiFlexItem>
            </EuiFlexGroup>
          </EuiFlexItem>
          <EuiFlexItem>
            <EuiTabs>{renderTabs()}</EuiTabs>
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlyoutHeader>
      <EuiFlyoutBody>{selectedTabContent}</EuiFlyoutBody>
      <EuiFlyoutFooter>
        <EuiFlexGroup gutterSize="none" justifyContent="flexEnd">
          <EuiFlexItem grow={false}>paginage</EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlyoutFooter>
    </EuiFlyout>
  );
};
