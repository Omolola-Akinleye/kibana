/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useCallback, useMemo } from 'react';
import { EuiBasicTableColumn, EuiFlexGroup, EuiFlexItem, EuiLink, EuiSpacer } from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import { PatchableVulnerabilityStat, VulnerableResourceStat } from '../../../common/types';
import { useCnvmStatisticsApi } from '../../common/api/use_vulnerabilities_stats_api';
import { DASHBOARD_TABLE_TYPES } from './dashboard_table_content';
import { VulnerabilityDashboardTableTile } from './vulnerability_dashboard_table_tile';
import { useNavigateVulnerabilities } from '../../common/hooks/use_navigate_findings';

export const VulnerabilityDashboardTableSection = () => {
  const getCnvmStats = useCnvmStatisticsApi();
  const navToVulnerabilities = useNavigateVulnerabilities();

  const onResourceNameCellClick = useCallback(
    (name) => {
      navToVulnerabilities({ 'resource.name': name });
    },
    [navToVulnerabilities]
  );
  const onCveCellClick = useCallback(
    (cve) => {
      navToVulnerabilities({ 'vulnerability.id': cve });
    },
    [navToVulnerabilities]
  );

  const onViewVulnerabilitiesClick = useCallback(() => {
    navToVulnerabilities();
  }, [navToVulnerabilities]);

  const topVulnerableResourceColumns: Array<EuiBasicTableColumn<VulnerableResourceStat>> = useMemo(
    () => [
      {
        field: 'resourceName',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.resource',
          {
            defaultMessage: 'Resource',
          }
        ),
        render: (name: string) => (
          <EuiLink onClick={() => onResourceNameCellClick(name)} className="eui-textTruncate">
            {name}
          </EuiLink>
        ),
      },
      {
        field: 'cloudRegion',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.region',
          {
            defaultMessage: 'Region',
          }
        ),
      },
      {
        field: 'resourceCount',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.resources',
          {
            defaultMessage: 'Resources',
          }
        ),
        align: 'right',
      },
    ],
    [onResourceNameCellClick]
  );

  const topPatchableVulnerabilitiesColumns: Array<EuiBasicTableColumn<PatchableVulnerabilityStat>> =
    useMemo(
      () => [
        {
          field: 'cve',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.cve',
            {
              defaultMessage: 'CVE',
            }
          ),
          render: (cve: string) => (
            <EuiLink onClick={() => onCVECellClick(cve)} className="eui-textTruncate">
              {cve}
            </EuiLink>
          ),
        },
        {
          field: 'version',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.version',
            {
              defaultMessage: 'CVSS',
            }
          ),
        },
        {
          field: 'packageFixVersion',
          truncateText: true,
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.tile.topPatchableVulnerabilities.column.fixedVersion',
            {
              defaultMessage: 'Fix Version',
            }
          ),
        },
        {
          field: 'vulnerabilityFixCount',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.tile.topVulnerableResources.column.vulnerabilityFixCount',
            {
              defaultMessage: 'Resources',
            }
          ),
          align: 'right',
        },
      ],
      []
    );

  return (
    <>
      <EuiFlexGroup direction="row">
        {getCnvmStats.data?.topVulnerableResources &&
          getCnvmStats.data?.topVulnerableResources?.length > 0 && (
            <EuiFlexItem>
              <VulnerabilityDashboardTableTile
                items={getCnvmStats.data?.topVulnerableResources}
                columns={topVulnerableResourceColumns}
                tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABLE_RESOURCES}
                onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
              />
            </EuiFlexItem>
          )}
        <EuiFlexItem>
          {/* Top 10 vulnerabilities here
               Todo populate top 10 patchable vulnerabilities
            */}
          <VulnerabilityDashboardTableTile
            items={[]}
            columns={[]}
            tableType={DASHBOARD_TABLE_TYPES.TOP_PATCH_VULNERABILITIES}
            onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
          />
        </EuiFlexItem>
      </EuiFlexGroup>
      <EuiSpacer />
      {/* Top 10 vulnerabilities here
      Todo populate top 10 vulnerabilities
      */}
      <VulnerabilityDashboardTableTile
        items={[]}
        columns={[]}
        tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABILITIES}
        onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
      />
    </>
  );
};
