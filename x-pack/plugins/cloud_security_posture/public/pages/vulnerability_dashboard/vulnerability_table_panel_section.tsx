/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useCallback, useMemo } from 'react';
import { EuiBasicTableColumn, EuiFlexGroup, EuiFlexItem, EuiLink, EuiSpacer } from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import {
  PatchableVulnerabilityStat,
  VulnerabilityStat,
  VulnerableResourceStat,
  VulnSeverity,
} from '../../../common/types';
import { useCnvmStatisticsApi } from '../../common/api/use_vulnerabilities_stats_api';
import { DASHBOARD_TABLE_TYPES } from './vulnerability_table_panel.config';
import { VulnerabilityTablePanel } from './vulnerability_table_panel';
import { useNavigateVulnerabilities } from '../../common/hooks/use_navigate_findings';
import { CVSScoreBadge, SeverityStatusBadge } from '../../components/vulnerability_badges';

export const VulnerabilityTablePanelSection = () => {
  const getCnvmStats = useCnvmStatisticsApi();
  const navToVulnerabilities = useNavigateVulnerabilities();

  const onResourceNameCellClick = useCallback(
    (name) => {
      navToVulnerabilities({ 'resource.name': name });
    },
    [navToVulnerabilities]
  );

  const onCveCellClick = useCallback(
    (cve) => {
      navToVulnerabilities({ 'vulnerability.id': cve });
    },
    [navToVulnerabilities]
  );

  const onViewVulnerabilitiesClick = useCallback(() => {
    navToVulnerabilities();
  }, [navToVulnerabilities]);

  const topVulnerableResourceColumns: Array<EuiBasicTableColumn<VulnerableResourceStat>> = useMemo(
    () => [
      {
        field: 'resource',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.resource',
          {
            defaultMessage: 'Resource',
          }
        ),
        render: (resource: { id: string; name: string }) => (
          <EuiLink
            onClick={() => onResourceNameCellClick(resource.name)}
            className="eui-textTruncate"
          >
            {resource.name}
          </EuiLink>
        ),
      },
      {
        field: 'cloudRegion',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.region',
          {
            defaultMessage: 'Region',
          }
        ),
      },
      {
        field: 'resourceCount',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.resources',
          {
            defaultMessage: 'Resources',
          }
        ),
        align: 'right',
      },
    ],
    [onResourceNameCellClick]
  );

  const topPatchableVulnerabilitiesColumns: Array<EuiBasicTableColumn<PatchableVulnerabilityStat>> =
    useMemo(
      () => [
        {
          field: 'cve',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.cve',
            {
              defaultMessage: 'CVE',
            }
          ),
          render: (cve: string) => (
            <EuiLink onClick={() => onCveCellClick(cve)} className="eui-textTruncate">
              {cve}
            </EuiLink>
          ),
        },
        {
          field: 'cvss',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.version',
            {
              defaultMessage: 'CVSS',
            }
          ),
          render: (cvss: { score: number; version: string }) => (
            <CVSScoreBadge version={cvss.version} score={cvss.score} />
          ),
        },
        {
          field: 'packageFixVersion',
          truncateText: true,
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.section.topPatchableVulnerabilities.column.fixedVersion',
            {
              defaultMessage: 'Fix Version',
            }
          ),
        },
        {
          field: 'resourceCount',
          name: i18n.translate(
            'xpack.csp.cvnmDasbhboardTable.section.topVulnerableResources.column.resourceCount',
            {
              defaultMessage: 'Resources',
            }
          ),
          align: 'right',
        },
      ],
      [onCveCellClick]
    );

  const topVulnerabilitiesColumns: Array<EuiBasicTableColumn<VulnerabilityStat>> = useMemo(
    () => [
      {
        field: 'cve',
        name: i18n.translate('xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.cve', {
          defaultMessage: 'CVE',
        }),
        render: (cve: string) => (
          <EuiLink onClick={() => onCveCellClick(cve)} className="eui-textTruncate">
            {cve}
          </EuiLink>
        ),
      },
      {
        field: 'cvss',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.version',
          {
            defaultMessage: 'CVSS',
          }
        ),
        render: (cvss: { score: number; version: string }) => (
          <CVSScoreBadge version={cvss.version} score={cvss.score} />
        ),
      },
      {
        field: 'severity',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.version',
          {
            defaultMessage: 'CVSS',
          }
        ),
        render: (severity: VulnSeverity) => <SeverityStatusBadge severity={severity} />,
      },
      {
        field: 'packageName',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.packageName',
          {
            defaultMessage: 'Package Name',
          }
        ),
      },
      {
        field: 'packageVersion',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.packageVersion',
          {
            defaultMessage: 'Package Version',
          }
        ),
      },
      {
        field: 'packageFixVersion',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.fixedVersion',
          {
            defaultMessage: 'Fix Version',
          }
        ),
      },
      {
        field: 'resourceCount',
        name: i18n.translate(
          'xpack.csp.cvnmDasbhboardTable.section.topVulnerability.column.resources',
          {
            defaultMessage: 'Resources',
          }
        ),
        align: 'right',
      },
    ],
    [onCveCellClick]
  );

  return (
    <>
      <EuiFlexGroup direction="row">
        {getCnvmStats.data?.topVulnerableResources &&
          getCnvmStats.data?.topVulnerableResources?.length > 0 && (
            <EuiFlexItem>
              <VulnerabilityTablePanel<VulnerableResourceStat>
                items={getCnvmStats.data?.topVulnerableResources}
                columns={topVulnerableResourceColumns}
                tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABLE_RESOURCES}
                onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
              />
            </EuiFlexItem>
          )}
        <EuiFlexItem>
          {getCnvmStats.data?.topPatchableVulnerabilities &&
            getCnvmStats.data?.topPatchableVulnerabilities?.length > 0 && (
              <VulnerabilityTablePanel<PatchableVulnerabilityStat>
                items={getCnvmStats.data?.topPatchableVulnerabilities}
                columns={topPatchableVulnerabilitiesColumns}
                tableType={DASHBOARD_TABLE_TYPES.TOP_PATCH_VULNERABILITIES}
                onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
              />
            )}
        </EuiFlexItem>
      </EuiFlexGroup>
      <EuiSpacer />
      {getCnvmStats.data?.topVulnerabilities &&
        getCnvmStats.data?.topVulnerabilities?.length > 0 && (
          <VulnerabilityTablePanel<VulnerabilityStat>
            items={getCnvmStats.data?.topVulnerabilities}
            columns={topVulnerabilitiesColumns}
            tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABILITIES}
            onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
          />
        )}
    </>
  );
};
